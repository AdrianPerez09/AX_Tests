
        SOURCE #populateRecords
          #// Issue 19572 (added by adrian.pe at 26/04/2022)
          #PHierarchyCostDetailsTmp populateRecords()
          #{
          #    PHierarchyCostList              hierarchyCostList;
          #    PHierarchyCostDetailsTmp        hierarchyCostDetailsTmp;
          #    ProjCategoryRelation            projCategoryRelation;
          #    ProjCategory                    projCategory;
          #    PCostAccountType                costAccountType;
          #    PCostAccount                    costAccount;
          #    ProjPosting                     projPosting;
          #    LedgerDimensionDefaultAccount   ledgerDimension;
          #    ProjId                          projId;
          #    ProjCategoryType                projCategoryType;
          #    int                             progressCount;
          #    int                             progressTotal;
          #
          #    #AviFiles
          #
          #    SysOperationProgress            sysOperationProgress;
          #
          #     select count(RecId) from hierarchyCostList
          #        where   !hierarchyCostList.isSubAccountSystem ||
          #                !hierarchyCostList.CostSubAccountId   &&
          #                hierarchyCostList.CostAccountId;
          #
          #    progressTotal = int642int(hierarchyCostList.RecId);
          #    //After finish, create a label.
          #    sysOperationProgress = SysOperationProgress::newGeneral(#AviUpdate, "Cargando cuentas de costo", progressTotal);
          #
          #    while select hierarchyCostList
          #    where   !hierarchyCostList.isSubAccountSystem ||
          #            !hierarchyCostList.CostSubAccountId   &&
          #            hierarchyCostList.CostAccountId
          #    {
          #        hierarchyCostDetailsTmp.clear();
          #        hierarchyCostDetailsTmp.initValue();
          #
          #        hierarchyCostDetailsTmp.HierarchyCostId     = hierarchyCostList.HierarchyCostId;
          #        hierarchyCostDetailsTmp.CostAccountId       = hierarchyCostList.CostAccountId;
          #        hierarchyCostDetailsTmp.CostAccountName     = hierarchyCostList.CostAccountName;
          #        hierarchyCostDetailsTmp.ConceptId           = hierarchyCostList.ConceptId;
          #        hierarchyCostDetailsTmp.ConceptDescription  = hierarchyCostList.ConceptDescription;
          #        hierarchyCostDetailsTmp.CostSubAccountName  = hierarchyCostList.CostSubAccountName;
          #        hierarchyCostDetailsTmp.CostSubAccountId    = hierarchyCostList.CostSubAccountId;
          #        hierarchyCostDetailsTmp.isSubAccountSystem  = hierarchyCostList.isSubAccountSystem;
          #
          #        select firstOnly ProjCategoryType from costAccount
          #            where costAccount.CostAccountId == hierarchyCostDetailsTmp.CostAccountId;
          #
          #        projCategoryType = str2enum(projCategoryType, costAccount.ProjCategoryType);
          #
          #        select firstOnly costAccountType
          #            where costAccountType.ProjCategoryType == projCategoryType;
          #
          #        projId = enum2str(TableGroupAll::All);
          #
          #        projCategoryRelation = ProjCategory.pGetProjCategory(hierarchyCostDetailsTmp.CostAccountId, hierarchyCostDetailsTmp.CostSubAccountId, hierarchyCostDetailsTmp.ConceptId);
          #        ledgerDimension = ProjPosting::getLedgerDimension(ProjAccountType::CostAccount,projId, "", 0);
          #
          #        if (ledgerDimension)
          #        {
          #            select projPosting
          #                where   projPosting.ProjCategoryRelation == projCategoryRelation    &&
          #                        projPosting.ProjCategoryRelation                            &&
          #                        projPosting.CategoryCode == 0                               &&
          #                        projPosting.ProjAccountType == ProjAccountType::CostAccount &&
          #                        projPosting.ProjFundingSource == 0;
          #
          #            if (projPosting)
          #            {
          #                if (costAccountType.ProjCategoryType == ProjCategoryType::Hour && costAccountType.Enabled || costAccountType.Hour)
          #                {
          #                    ledgerDimension = projPosting.LedgerDimension;
          #                    hierarchyCostDetailsTmp.MainAccountHour = MainAccount::findByLedgerDimension(ledgerDimension).MainAccountId;
          #                    hierarchyCostDetailsTmp.MainAccountHourName = MainAccount::findByLedgerDimension(ledgerDimension).Name;
          #
          #                    info(strFmt("%1, %2", projCategoryRelation, ledgerDimension));
          #                }
          #
          #                if (costAccountType.ProjCategoryType == ProjCategoryType::Cost && costAccountType.Enabled || costAccountType.Cost)
          #                {
          #                    ledgerDimension = projPosting.LedgerDimension;
          #                    hierarchyCostDetailsTmp.MainAccountCost = MainAccount::findByLedgerDimension(ledgerDimension).MainAccountId;
          #                    hierarchyCostDetailsTmp.MainAccountCostName = MainAccount::findByLedgerDimension(ledgerDimension).Name;
          #
          #                    info(strFmt("%1, %2", projCategoryRelation, ledgerDimension));
          #                }
          #
          #                if (costAccountType.ProjCategoryType == ProjCategoryType::Item && costAccountType.Enabled || costAccountType.Item)
          #                {
          #                    ledgerDimension = projPosting.LedgerDimension;
          #                    hierarchyCostDetailsTmp.MainAccountItem = MainAccount::findByLedgerDimension(ledgerDimension).MainAccountId;
          #                    hierarchyCostDetailsTmp.MainAccountItemName = MainAccount::findByLedgerDimension(ledgerDimension).Name;
          #
          #                    info(strFmt("%1, %2", projCategoryRelation, ledgerDimension));
          #                }
          #            }
          #        }
          #
          #        sysOperationProgress.incCount();
          #        progressCount ++;
          #        sysOperationProgress.setText(strFmt("@SYS333411", progressCount, progressTotal));
          #
          #        hierarchyCostDetailsTmp.Insert();
          #    }
          #
          #    return hierarchyCostDetailsTmp;
          #}
        ENDSOURCE
        
        SOURCE #init
          #// Issue 19261 (added by aitor.fi at 19/11/2021)
          #public void init()
          #{
          #    QueryBuildDataSource qbds;
          #
          #    super();
          #
          #    // --> Start Issue 19572  (added by adrian.pe at 26/04/2022)
          #
          #    //Link temp table to physical one.
          #    PHierarchyCostDetailsTmp.linkPhysicalTableInstance(this.populateRecords());
          #
          #    qbds = this.query().dataSourceTable(tableNum(PHierarchyCostDetailsTmp));
          #
          #    qbds.addSortField(fieldNum(PHierarchyCostDetailsTmp, CostAccountId));
          #    qbds.addSortField(fieldNum(PHierarchyCostDetailsTmp, CostSubAccountId));
          #    qbds.addSortField(fieldNum(PHierarchyCostDetailsTmp, ConceptId));
          #
          #    // <-- End Issue 19572
          #}
        ENDSOURCE
      ENDMETHODS
 
